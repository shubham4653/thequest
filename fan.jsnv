{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Live Object Detection with Gemini API</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f5f5f5;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            color: #333;\n        }\n\n        .container {\n            width: 80%;\n            max-width: 1200px;\n            margin: 0 auto;\n            background-color: white;\n            border-radius: 8px;\n            padding: 20px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        }\n\n        header {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n\n        header h1 {\n            font-size: 2.5em;\n            color: #4CAF50;\n        }\n\n        header p {\n            font-size: 1.2em;\n            color: #555;\n        }\n\n        main {\n            display: flex;\n            justify-content: space-between;\n            gap: 20px;\n        }\n\n        .webcam-container {\n            position: relative;\n            width: 640px;\n            height: 480px;\n        }\n\n        #canvas-container {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 640px;\n            height: 480px;\n            pointer-events: none;\n        }\n\n        #description-container {\n            flex: 1;\n            max-width: 300px;\n            padding: 10px;\n            background-color: #f0f0f0;\n            border-radius: 8px;\n        }\n\n        #description-container h3 {\n            font-size: 1.5em;\n            color: #333;\n            margin-bottom: 15px;\n        }\n\n        #description-list {\n            list-style: none;\n            padding-left: 0;\n        }\n\n        #description-list li {\n            background-color: #e7f9e7;\n            border: 1px solid #4CAF50;\n            border-radius: 5px;\n            margin-bottom: 10px;\n            padding: 10px;\n            font-size: 1.1em;\n            color: #333;\n        }\n\n        footer {\n            text-align: center;\n            margin-top: 20px;\n            color: #777;\n            font-size: 0.9em;\n        }\n\n        /* Loading Animation Styles */\n        #loading {\n            display: none;\n            font-size: 1.5em;\n            text-align: center;\n            color: #4CAF50;\n        }\n\n        .loading-spinner {\n            border: 4px solid #f3f3f3; \n            border-top: 4px solid #4CAF50;\n            border-radius: 50%;\n            width: 40px;\n            height: 40px;\n            animation: spin 1s linear infinite;\n            margin: 20px auto;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        #start-button {\n            padding: 10px 20px;\n            background-color: #4CAF50;\n            color: white;\n            font-size: 1.2em;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n\n        #start-button:disabled {\n            background-color: #ccc;\n            cursor: not-allowed;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Live Object Detection</h1>\n            <p>Using Webcam and Gemini API</p>\n        </header>\n        <main>\n            <div class=\"webcam-container\">\n                <video id=\"webcam\" width=\"640\" height=\"480\" autoplay></video>\n                <div id=\"canvas-container\">\n                    <canvas id=\"canvas\" width=\"640\" height=\"480\"></canvas>\n                </div>\n            </div>\n            <div id=\"description-container\">\n                <h3>Object Descriptions</h3>\n                <ul id=\"description-list\"></ul>\n            </div>\n        </main>\n        <footer>\n            <p>Powered by TensorFlow.js, COCO-SSD, and Gemini API</p>\n        </footer>\n    </div>\n\n    <!-- Loading animation -->\n    <div id=\"loading\">\n        <div class=\"loading-spinner\"></div>\n        Loading...\n    </div>\n\n    <button id=\"start-button\">Start Detection</button>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd\"></script>\n    <script>\n        const video = document.getElementById('webcam');\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n        const descriptionList = document.getElementById('description-list');\n        const startButton = document.getElementById('start-button');\n        const loadingDiv = document.getElementById('loading');\n        let model;\n\n        // Load the COCO-SSD model for object detection\n        async function loadModel() {\n            try {\n                console.log('Loading COCO-SSD model...');\n                loadingDiv.style.display = 'block';  // Show loading spinner\n                model = await cocoSsd.load();\n                console.log('COCO-SSD Model Loaded');\n                loadingDiv.style.display = 'none';  // Hide loading spinner after model is loaded\n            } catch (error) {\n                console.error(\"Error loading COCO-SSD model: \", error);\n                loadingDiv.style.display = 'none';  // Hide loading spinner on error\n            }\n        }\n\n        // Access webcam and display feed\n        async function startWebcam() {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n                video.srcObject = stream;\n                video.onloadedmetadata = () => {\n                    console.log(\"Webcam feed is ready.\");\n                };\n                video.play();\n            } catch (error) {\n                console.error(\"Webcam access denied or failed: \", error);\n            }\n        }\n\n        // Query Gemini API for object descriptions\n        async function queryGeminiApi(description) {\n            const apiKey = 'AIzaSyBCHpmZfEKE8s_CVYwuOJet3we6-IHfD7Q';  // Replace with your actual Gemini API key\n            try {\n                const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${apiKey}`\n                    },\n                    body: JSON.stringify({\n                        query: `Describe the object: ${description}`\n                    })\n                });\n\n                const data = await response.json();\n                return data.response || \"No description available\";\n            } catch (error) {\n                console.error(\"Error querying Gemini API: \", error);\n                return \"Description not available\";\n            }\n        }\n\n        // Detect objects in the webcam feed and display descriptions\n        async function detectObjects() {\n            if (!model) {\n                console.log(\"Model is not loaded yet.\");\n                return;\n            }\n\n            const predictions = await model.detect(video);\n            ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear previous detections\n\n            if (predictions.length === 0) {\n                console.log('No objects detected');\n                return;\n            }\n\n            // Clear the description list\n            descriptionList.innerHTML = '';\n\n            predictions.forEach(async (prediction) => {\n                const [x, y, width, height] = prediction.bbox;\n                ctx.beginPath();\n                ctx.rect(x, y, width, height);\n                ctx.lineWidth = 3;\n                ctx.strokeStyle = 'red';\n                ctx.fillStyle = 'red';\n                ctx.stroke();\n                ctx.fillText(`${prediction.class} (${Math.round(prediction.score * 100)}%)`, x, y > 10 ? y - 5 : 10);\n\n                // Get description from Gemini API\n                const description = await queryGeminiApi(prediction.class);\n\n                // Display the description in the list\n                const listItem = document.createElement('li');\n                listItem.textContent = `${prediction.class}: ${description}`;\n                descriptionList.appendChild(listItem);\n            });\n\n            requestAnimationFrame(detectObjects); // Continuously detect objects\n        }\n\n        // Start detection once the model is loaded and the webcam is ready\n        async function startDetection() {\n            startButton.disabled = true; // Disable button during detection\n            await loadModel(); // Ensure model is loaded first\n            detectObjects();   // Begin detecting objects after the model is loaded\n        }\n\n        // Initialize webcam and start button\n        startButton.addEventListener('click', startDetection);\n        startWebcam();\n    </script>\n</body>\n</html>\n",
      "status": "",
      "output": "\n\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Live Object Detection with Gemini API</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f5f5f5;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            color: #333;\n        }\n\n        .container {\n            width: 80%;\n            max-width: 1200px;\n            margin: 0 auto;\n            background-color: white;\n            border-radius: 8px;\n            padding: 20px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        }\n\n        header {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n\n        header h1 {\n            font-size: 2.5em;\n            color: #4CAF50;\n        }\n\n        header p {\n            font-size: 1.2em;\n            color: #555;\n        }\n\n        main {\n            display: flex;\n            justify-content: space-between;\n            gap: 20px;\n        }\n\n        .webcam-container {\n            position: relative;\n            width: 640px;\n            height: 480px;\n        }\n\n        #canvas-container {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 640px;\n            height: 480px;\n            pointer-events: none;\n        }\n\n        #description-container {\n            flex: 1;\n            max-width: 300px;\n            padding: 10px;\n            background-color: #f0f0f0;\n            border-radius: 8px;\n        }\n\n        #description-container h3 {\n            font-size: 1.5em;\n            color: #333;\n            margin-bottom: 15px;\n        }\n\n        #description-list {\n            list-style: none;\n            padding-left: 0;\n        }\n\n        #description-list li {\n            background-color: #e7f9e7;\n            border: 1px solid #4CAF50;\n            border-radius: 5px;\n            margin-bottom: 10px;\n            padding: 10px;\n            font-size: 1.1em;\n            color: #333;\n        }\n\n        footer {\n            text-align: center;\n            margin-top: 20px;\n            color: #777;\n            font-size: 0.9em;\n        }\n\n        /* Loading Animation Styles */\n        #loading {\n            display: none;\n            font-size: 1.5em;\n            text-align: center;\n            color: #4CAF50;\n        }\n\n        .loading-spinner {\n            border: 4px solid #f3f3f3; \n            border-top: 4px solid #4CAF50;\n            border-radius: 50%;\n            width: 40px;\n            height: 40px;\n            animation: spin 1s linear infinite;\n            margin: 20px auto;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        #start-button {\n            padding: 10px 20px;\n            background-color: #4CAF50;\n            color: white;\n            font-size: 1.2em;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n\n        #start-button:disabled {\n            background-color: #ccc;\n            cursor: not-allowed;\n        }\n    </style>\n\n\n    <div class=\"container\">\n        <header>\n            <h1>Live Object Detection</h1>\n            <p>Using Webcam and Gemini API</p>\n        </header>\n        <main>\n            <div class=\"webcam-container\">\n                <video id=\"webcam\" width=\"640\" height=\"480\" autoplay=\"\"></video>\n                <div id=\"canvas-container\">\n                    <canvas id=\"canvas\" width=\"640\" height=\"480\"></canvas>\n                </div>\n            </div>\n            <div id=\"description-container\">\n                <h3>Object Descriptions</h3>\n                <ul id=\"description-list\"></ul>\n            </div>\n        </main>\n        <footer>\n            <p>Powered by TensorFlow.js, COCO-SSD, and Gemini API</p>\n        </footer>\n    </div>\n\n    <!-- Loading animation -->\n    <div id=\"loading\">\n        <div class=\"loading-spinner\"></div>\n        Loading...\n    </div>\n\n    <button id=\"start-button\">Start Detection</button>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd\"></script>\n    <script>\n        const video = document.getElementById('webcam');\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n        const descriptionList = document.getElementById('description-list');\n        const startButton = document.getElementById('start-button');\n        const loadingDiv = document.getElementById('loading');\n        let model;\n\n        // Load the COCO-SSD model for object detection\n        async function loadModel() {\n            try {\n                console.log('Loading COCO-SSD model...');\n                loadingDiv.style.display = 'block';  // Show loading spinner\n                model = await cocoSsd.load();\n                console.log('COCO-SSD Model Loaded');\n                loadingDiv.style.display = 'none';  // Hide loading spinner after model is loaded\n            } catch (error) {\n                console.error(\"Error loading COCO-SSD model: \", error);\n                loadingDiv.style.display = 'none';  // Hide loading spinner on error\n            }\n        }\n\n        // Access webcam and display feed\n        async function startWebcam() {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n                video.srcObject = stream;\n                video.onloadedmetadata = () => {\n                    console.log(\"Webcam feed is ready.\");\n                };\n                video.play();\n            } catch (error) {\n                console.error(\"Webcam access denied or failed: \", error);\n            }\n        }\n\n        // Query Gemini API for object descriptions\n        async function queryGeminiApi(description) {\n            const apiKey = 'AIzaSyBCHpmZfEKE8s_CVYwuOJet3we6-IHfD7Q';  // Replace with your actual Gemini API key\n            try {\n                const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${apiKey}`\n                    },\n                    body: JSON.stringify({\n                        query: `Describe the object: ${description}`\n                    })\n                });\n\n                const data = await response.json();\n                return data.response || \"No description available\";\n            } catch (error) {\n                console.error(\"Error querying Gemini API: \", error);\n                return \"Description not available\";\n            }\n        }\n\n        // Detect objects in the webcam feed and display descriptions\n        async function detectObjects() {\n            if (!model) {\n                console.log(\"Model is not loaded yet.\");\n                return;\n            }\n\n            const predictions = await model.detect(video);\n            ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear previous detections\n\n            if (predictions.length === 0) {\n                console.log('No objects detected');\n                return;\n            }\n\n            // Clear the description list\n            descriptionList.innerHTML = '';\n\n            predictions.forEach(async (prediction) => {\n                const [x, y, width, height] = prediction.bbox;\n                ctx.beginPath();\n                ctx.rect(x, y, width, height);\n                ctx.lineWidth = 3;\n                ctx.strokeStyle = 'red';\n                ctx.fillStyle = 'red';\n                ctx.stroke();\n                ctx.fillText(`${prediction.class} (${Math.round(prediction.score * 100)}%)`, x, y > 10 ? y - 5 : 10);\n\n                // Get description from Gemini API\n                const description = await queryGeminiApi(prediction.class);\n\n                // Display the description in the list\n                const listItem = document.createElement('li');\n                listItem.textContent = `${prediction.class}: ${description}`;\n                descriptionList.appendChild(listItem);\n            });\n\n            requestAnimationFrame(detectObjects); // Continuously detect objects\n        }\n\n        // Start detection once the model is loaded and the webcam is ready\n        async function startDetection() {\n            startButton.disabled = true; // Disable button during detection\n            await loadModel(); // Ensure model is loaded first\n            detectObjects();   // Begin detecting objects after the model is loaded\n        }\n\n        // Initialize webcam and start button\n        startButton.addEventListener('click', startDetection);\n        startWebcam();\n    </script>\n\n\n",
      "type": "html"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}