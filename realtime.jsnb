{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Live Object Detection with Gemini API</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f5f5f5;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            color: #333;\n        }\n\n        .container {\n            width: 80%;\n            max-width: 1200px;\n            margin: 0 auto;\n            background-color: white;\n            border-radius: 8px;\n            padding: 20px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        }\n\n        .webcam-container {\n            position: relative;\n        }\n\n        video {\n            width: 100%;\n            height: auto;\n            border-radius: 8px;\n        }\n\n        canvas {\n            position: absolute;\n            top: 0;\n            left: 0;\n            border-radius: 8px;\n        }\n\n        #loading {\n            display: none;\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            background-color: rgba(0, 0, 0, 0.5);\n            color: white;\n            padding: 20px;\n            border-radius: 8px;\n        }\n\n        #start-button {\n            padding: 10px 20px;\n            margin-top: 20px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n\n        #start-button:disabled {\n            background-color: #ddd;\n            cursor: not-allowed;\n        }\n\n        footer {\n            margin-top: 20px;\n            text-align: center;\n            font-size: 14px;\n            color: #666;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Live Object Detection</h1>\n            <p>Using Webcam and Gemini API</p>\n        </header>\n        <main>\n            <div class=\"webcam-container\">\n                <video id=\"webcam\" width=\"640\" height=\"480\" autoplay></video>\n                <div id=\"canvas-container\">\n                    <canvas id=\"canvas\" width=\"640\" height=\"480\"></canvas>\n                </div>\n            </div>\n            <div id=\"description-container\">\n                <h3>Object Descriptions</h3>\n                <ul id=\"description-list\"></ul>\n            </div>\n        </main>\n        <footer>\n            <p>Powered by TensorFlow.js, COCO-SSD, and Gemini API</p>\n        </footer>\n    </div>\n\n    <div id=\"loading\">\n        <div class=\"loading-spinner\"></div>\n        Loading...\n    </div>\n\n    <button id=\"start-button\">Start Detection</button>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd\"></script>\n</body>\n</html>\n",
      "status": "",
      "output": "\n\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Live Object Detection with Gemini API</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f5f5f5;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            color: #333;\n        }\n\n        .container {\n            width: 80%;\n            max-width: 1200px;\n            margin: 0 auto;\n            background-color: white;\n            border-radius: 8px;\n            padding: 20px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        }\n\n        .webcam-container {\n            position: relative;\n        }\n\n        video {\n            width: 100%;\n            height: auto;\n            border-radius: 8px;\n        }\n\n        canvas {\n            position: absolute;\n            top: 0;\n            left: 0;\n            border-radius: 8px;\n        }\n\n        #loading {\n            display: none;\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            background-color: rgba(0, 0, 0, 0.5);\n            color: white;\n            padding: 20px;\n            border-radius: 8px;\n        }\n\n        #start-button {\n            padding: 10px 20px;\n            margin-top: 20px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n\n        #start-button:disabled {\n            background-color: #ddd;\n            cursor: not-allowed;\n        }\n\n        footer {\n            margin-top: 20px;\n            text-align: center;\n            font-size: 14px;\n            color: #666;\n        }\n    </style>\n\n\n    <div class=\"container\">\n        <header>\n            <h1>Live Object Detection</h1>\n            <p>Using Webcam and Gemini API</p>\n        </header>\n        <main>\n            <div class=\"webcam-container\">\n                <video id=\"webcam\" width=\"640\" height=\"480\" autoplay=\"\"></video>\n                <div id=\"canvas-container\">\n                    <canvas id=\"canvas\" width=\"0\" height=\"0\"></canvas>\n                </div>\n            </div>\n            <div id=\"description-container\">\n                <h3>Object Descriptions</h3>\n                <ul id=\"description-list\"></ul>\n            </div>\n        </main>\n        <footer>\n            <p>Powered by TensorFlow.js, COCO-SSD, and Gemini API</p>\n        </footer>\n    </div>\n\n    <div id=\"loading\">\n        <div class=\"loading-spinner\"></div>\n        Loading...\n    </div>\n\n    <button id=\"start-button\">Start Detection</button>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd\"></script>\n\n\n",
      "type": "html"
    },
    {
      "code": "let model;\nconst video = document.getElementById('webcam');\nconst canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext('2d');\nconst descriptionList = document.getElementById('description-list');\nconst loadingDiv = document.getElementById('loading');\nconst startButton = document.getElementById('start-button');\n\n// Load the COCO-SSD model for object detection\nasync function loadModel() {\n    try {\n        console.log('Loading COCO-SSD model...');\n        loadingDiv.style.display = 'block';  // Show loading spinner\n        model = await cocoSsd.load();\n        console.log('COCO-SSD Model Loaded');\n        loadingDiv.style.display = 'none';  // Hide loading spinner after model is loaded\n    } catch (error) {\n        console.error(\"Error loading COCO-SSD model: \", error);\n        loadingDiv.style.display = 'none';  // Hide loading spinner on error\n    }\n}\n\n// Access webcam and display feed\nasync function startWebcam() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n        video.srcObject = stream;\n        video.onloadedmetadata = () => {\n            console.log(\"Webcam feed is ready.\");\n        };\n        video.play();\n        console.log(\"Webcam is streaming...\");\n    } catch (error) {\n        console.error(\"Webcam access denied or failed: \", error);\n    }\n}\n\n// Query Gemini API for object descriptions asynchronously\nasync function queryGeminiApi(description) {\n    const apiKey = 'AIzaSyBCHpmZfEKE8s_CVYwuOJet3we6-IHfD7Q';  // Replace with your actual Gemini API key\n    try {\n        console.log(`Querying Gemini API for description of: ${description}`);\n        const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${apiKey}`\n            },\n            body: JSON.stringify({\n                query: `Describe the object: ${description}`\n            })\n        });\n\n        const data = await response.json();\n        console.log(`Received description for ${description}: ${data.response}`);\n        return data.response || \"No description available\";\n    } catch (error) {\n        console.error(\"Error querying Gemini API: \", error);\n        return \"Description not available\";\n    }\n}\n\n// Detect objects in the webcam feed and draw rectangles\nasync function detectObjects() {\n    if (!model) {\n        console.log(\"Model is not loaded yet.\");\n        return;\n    }\n\n    console.log(\"Detecting objects...\");\n    const predictions = await model.detect(video);\n    ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear previous detections\n\n    if (predictions.length === 0) {\n        console.log('No objects detected');\n        return;\n    }\n\n    // Clear the description list\n    descriptionList.innerHTML = '';\n\n    // Draw rectangles and fetch descriptions for each detected object\n    predictions.forEach(async (prediction) => {\n        const [x, y, width, height] = prediction.bbox;\n        ctx.beginPath();\n        ctx.rect(x, y, width, height);\n        ctx.lineWidth = 3;\n        ctx.strokeStyle = 'red';\n        ctx.fillStyle = 'red';\n        ctx.stroke();\n        ctx.fillText(`${prediction.class} (${Math.round(prediction.score * 100)}%)`, x, y > 10 ? y - 5 : 10);\n\n        console.log(`Object detected: ${prediction.class} with confidence ${Math.round(prediction.score * 100)}%`);\n\n        // Display descriptions immediately in the list\n        const listItem = document.createElement('li');\n        listItem.textContent = `${prediction.class}: Loading description...`;\n        descriptionList.appendChild(listItem);\n\n        // Fetch description from Gemini API asynchronously\n        queryGeminiApi(prediction.class).then(description => {\n            console.log(`Updated description for ${prediction.class}: ${description}`);\n            listItem.textContent = `${prediction.class}: ${description}`;\n        });\n    });\n\n    // Continuously call detectObjects for the next frame\n    requestAnimationFrame(detectObjects);\n}\n\n// Start detection once the model is loaded and the webcam is ready\nasync function startDetection() {\n    startButton.disabled = true; // Disable button during detection\n    console.log(\"Starting detection...\");\n    await loadModel(); // Ensure model is loaded first\n    detectObjects();   // Begin detecting objects after the model is loaded\n}\n\n// Initialize webcam and start button\nstartButton.addEventListener('click', startDetection);\nstartWebcam();  // Ensure webcam starts on load\n\n// Ensure the canvas is the same size as the video feed\nvideo.addEventListener('play', () => {\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    console.log(`Video dimensions: ${canvas.width}x${canvas.height}`);\n});\n",
      "status": "[14]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}